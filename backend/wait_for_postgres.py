import os
import time
import psycopg2
from psycopg2 import OperationalError

def wait_for_postgres():
    max_retries = 10
    retry_delay = 5
    
    print("üîç Verificando conex√£o com PostgreSQL...")
    
    for i in range(max_retries):
        try:
            conn = psycopg2.connect(
                host="app-data",  # Nome do servi√ßo no docker-compose
                database=os.getenv("NAME_PGSQL"),
                user=os.getenv("USER_PGSQL"),
                password=os.getenv("PASS_PGSQL"),
                connect_timeout=5
            )
            conn.close()
            print("‚úÖ PostgreSQL pronto para conex√µes!")
            return True
        except OperationalError as e:
            print(f"‚ö†Ô∏è Tentativa {i+1}/{max_retries} - PostgreSQL n√£o responde...")
            if i == max_retries - 1:
                print("‚ùå Falha cr√≠tica - PostgreSQL n√£o est√° acess√≠vel")
                raise
            time.sleep(retry_delay)

if __name__ == '__main__':
    wait_for_postgres()












#     Documenta√ß√£o - Conex√£o com PostgreSQL (Fun√ß√£o wait_for_postgres)
# Objetivo
# A fun√ß√£o wait_for_postgres tem como objetivo verificar se o banco de dados PostgreSQL est√° acess√≠vel antes de permitir que a aplica√ß√£o prossiga. A fun√ß√£o tenta se conectar ao banco de dados utilizando credenciais de ambiente, com um n√∫mero m√°ximo de tentativas e intervalos entre elas para garantir que o banco esteja pronto para conex√µes.

# Funcionalidade
# Verifica√ß√£o de Conex√£o: A fun√ß√£o tenta estabelecer uma conex√£o com o banco de dados PostgreSQL, usando os par√¢metros fornecidos pelas vari√°veis de ambiente, como nome de usu√°rio, senha e nome do banco de dados.

# Tentativas e Atrasos: Caso a primeira tentativa de conex√£o falhe, a fun√ß√£o continuar√° tentando estabelecer a conex√£o at√© um n√∫mero m√°ximo de tentativas (10 tentativas no total). Entre cada tentativa, ser√° aguardado um tempo espec√≠fico (5 segundos).

# Resposta de Sucesso ou Falha:

# Se a conex√£o for bem-sucedida, a fun√ß√£o imprime uma mensagem de sucesso e a aplica√ß√£o poder√° prosseguir.

# Caso o n√∫mero m√°ximo de tentativas seja atingido sem sucesso, a fun√ß√£o imprime uma mensagem de erro e levanta uma exce√ß√£o para interromper a execu√ß√£o.

# Par√¢metros
# max_retries: O n√∫mero m√°ximo de tentativas de conex√£o (configurado para 10 tentativas).

# retry_delay: O intervalo entre as tentativas de conex√£o em segundos (configurado para 5 segundos).

# Vari√°veis de ambiente: S√£o utilizadas para passar as credenciais necess√°rias para a conex√£o com o banco de dados (usu√°rio, senha, nome do banco de dados).

# Comportamento
# Sucesso: A fun√ß√£o considera a conex√£o bem-sucedida quando consegue se conectar ao banco de dados sem erros. Nesse caso, ela imprime "PostgreSQL pronto para conex√µes!" e a execu√ß√£o continua.

# Falha: Se todas as tentativas de conex√£o falharem, a fun√ß√£o imprime "Falha cr√≠tica - PostgreSQL n√£o est√° acess√≠vel" e levanta uma exce√ß√£o, interrompendo a execu√ß√£o da aplica√ß√£o.

# Cen√°rios de Uso
# Esta fun√ß√£o √© ideal para ser utilizada em aplica√ß√µes que dependem de um banco de dados PostgreSQL, especialmente em ambientes de cont√™ineres (como Docker), onde o banco de dados pode n√£o estar imediatamente dispon√≠vel para conex√µes assim que o servi√ßo √© iniciado.

# Exce√ß√µes Tratadas
# A fun√ß√£o lida com exce√ß√µes do tipo OperationalError do psycopg2, que s√£o levantadas quando a tentativa de conex√£o com o banco de dados falha. Se a fun√ß√£o atingir o limite m√°ximo de tentativas sem sucesso, uma exce√ß√£o √© levantada para interromper a execu√ß√£o.